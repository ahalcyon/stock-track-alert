name: CI/CD

on:
  push:
    branches:
      - master

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::769813884566:role/github-actions-role-stock-track-alert # 作成したIAMロールのARN
          aws-region: ap-northeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Check if poller image exists
        id: check-poller
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: poller
          IMAGE_TAG: ${{ github.sha }}
        run: |
          if aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=$IMAGE_TAG --region ap-northeast-1 >/dev/null 2>&1; then
            echo "image_exists=true" >> $GITHUB_OUTPUT
          else
            echo "image_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if notifier image exists
        id: check-notifier
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: notifier
          IMAGE_TAG: ${{ github.sha }}
        run: |
          if aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=$IMAGE_TAG --region ap-northeast-1 >/dev/null 2>&1; then
            echo "image_exists=true" >> $GITHUB_OUTPUT
          else
            echo "image_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Build, tag, and push poller image to Amazon ECR
        if: steps.check-poller.outputs.image_exists == 'false'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: poller
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker/poller.Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Also tag as latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Build, tag, and push notifier image to Amazon ECR
        if: steps.check-notifier.outputs.image_exists == 'false'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: notifier
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f docker/notifier.Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Also tag as latest
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::769813884566:role/github-actions-role-stock-track-alert # 作成したIAMロールのARN
          aws-region: ap-northeast-1

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="bucket=stock-track-alert-tfstate" \
            -backend-config="key=dev/terraform.tfstate" \
            -backend-config="region=ap-northeast-1" \
            -backend-config="dynamodb_table=stock-track-alert-tfstate-lock"
        working-directory: ./infra/envs/dev

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -out=tfplan -detailed-exitcode
          echo "plan_exitcode=$?" >> $GITHUB_OUTPUT
        working-directory: ./infra/envs/dev
        continue-on-error: true

      - name: Terraform Apply
        if: steps.plan.outputs.plan_exitcode == '2'
        run: terraform apply tfplan
        working-directory: ./infra/envs/dev

      - name: No changes detected
        if: steps.plan.outputs.plan_exitcode == '0'
        run: echo "No infrastructure changes detected."
